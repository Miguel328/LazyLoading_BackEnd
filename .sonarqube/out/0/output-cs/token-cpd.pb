…
_C:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\DomainException.cs
	namespace 	
LazyLoading
 
. 
Domain 
{ 
[ 
Serializable 
] 
public 

class 
DomainException  
:! "
	Exception# ,
{ 
internal 
DomainException  
(  !
string! '
businessMessage( 7
)7 8
:9 :
base; ?
(? @
businessMessage@ O
)O P
{		 	
}

 	
public 
DomainException 
( 
)  
{ 	
} 	
public 
DomainException 
( 
string %
message& -
,- .
	Exception/ 8
innerException9 G
)G H
:I J
baseK O
(O P
messageP W
,W X
innerExceptionY g
)g h
{ 	
} 	
	protected 
DomainException !
(! "
System" (
.( )
Runtime) 0
.0 1
Serialization1 >
.> ?
SerializationInfo? P
serializationInfoQ b
,b c
Systemd j
.j k
Runtimek r
.r s
Serialization	s Ä
.
Ä Å
StreamingContext
Å ë
streamingContext
í ¢
)
¢ £
:
§ •
base
¶ ™
(
™ ´
serializationInfo
´ º
,
º Ω
streamingContext
æ Œ
)
Œ œ
{ 	
} 	
} 
} Ï
eC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\FileInput\ContentFile.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
	FileInput &
{ 
public 

sealed 
class 
ContentFile #
{ 
public 
string 
[ 
] 
Lines 
{ 
get  #
;# $
private% ,
set- 0
;0 1
}2 3
public

 
ContentFile

 
(

 
string

 !
[

! "
]

" #
lines

$ )
)

) *
{ 	
this 
. 
Lines 
= 
lines 
; 
} 	
public 
Task 
< 

Dictionary 
< 
int "
," #
List$ (
<( )
int) ,
>, -
>- .
>. /
Convert0 7
(7 8
)8 9
{ 	

Dictionary 
< 
int 
, 
List  
<  !
int! $
>$ %
>% &
result' -
=. /
new0 3

Dictionary4 >
<> ?
int? B
,B C
ListD H
<H I
intI L
>L M
>M N
(N O
)O P
;P Q
int 
day 
= 
$num 
; 
for 
( 
int 
	indexLine 
=  
$num! "
;" #
	indexLine$ -
<. /
(0 1
this1 5
.5 6
Lines6 ;
.; <
Length< B
-C D
$numE F
)F G
;G H
	indexLineI R
++R T
)T U
{ 
day 
++ 
; 
int 
totalEments 
=  !
System" (
.( )
Convert) 0
.0 1
ToInt321 8
(8 9
this9 =
.= >
Lines> C
[C D
	indexLineD M
]M N
)N O
;O P
List 
< 
int 
> 
listElements &
=' (
new) ,
List- 1
<1 2
int2 5
>5 6
(6 7
)7 8
;8 9
int 
indexElement  
;  !
for 
( 
indexElement !
=" #
($ %
	indexLine% .
+/ 0
$num1 2
)2 3
;3 4
indexElement5 A
<=B D
(E F
	indexLineF O
+P Q
totalEmentsR ]
)] ^
;^ _
indexElement` l
++l n
)n o
{ 
listElements    
.    !
Add  ! $
(  $ %
System  % +
.  + ,
Convert  , 3
.  3 4
ToInt32  4 ;
(  ; <
this  < @
.  @ A
Lines  A F
[  F G
indexElement  G S
]  S T
)  T U
)  U V
;  V W
}!! 
result## 
.## 
Add## 
(## 
day## 
,## 
listElements##  ,
)##, -
;##- .
	indexLine$$ 
=$$ 
indexElement$$ (
-$$) *
$num$$+ ,
;$$, -
}%% 
return'' 
Task'' 
.'' 

FromResult'' "
(''" #
result''# )
)'') *
;''* +
}(( 	
})) 
}** ˜
cC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\FileInput\InputFile.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
	FileInput &
{ 
public 

sealed 
class 
	InputFile !
{		 
public

 
FileProperty

 
File

  
{

! "
get

# &
;

& '
private

( /
set

0 3
;

3 4
}

5 6
public 
	InputFile 
( 
FileProperty %
file& *
)* +
{ 	
this 
. 
File 
= 
file 
; 
} 	
public 
async 
Task 
< 
string  
[  !
]! "
>" #
	ReadAsync$ -
(- .
). /
{ 	
StreamReader 
streamReader %
=& '
new( +
StreamReader, 8
(8 9
this9 =
.= >
File> B
)B C
;C D
String 
content 
= 
await "
streamReader# /
./ 0
ReadToEndAsync0 >
(> ?
)? @
;@ A
string 
[ 
] 
lines 
= 
content $
.$ %
Split% *
(* +
$char+ /
)/ 0
;0 1
return 
lines 
; 
} 	
} 
} ü
]C:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\Logger\Logger.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
Logger #
{ 
public 

sealed 
class 
Logger 
{ 
public 
int 
Id 
{ 
get 
; 
private $
set% (
;( )
}* +
public		 
DniProperty		 
Dni		 
{		  
get		! $
;		$ %
private		& -
set		. 1
;		1 2
}		3 4
public

 
DateTime

 
Date

 
{

 
get

 "
;

" #
private

$ +
set

, /
;

/ 0
}

1 2
public 
string 
Trips 
{ 
get !
;! "
private# *
set+ .
;. /
}0 1
public 
Logger 
( 
DniProperty !
dni" %
,% &
DateTime' /
date0 4
,4 5
string6 <
trips= B
)B C
{ 	
this 
. 
Dni 
= 
dni 
; 
this 
. 
Date 
= 
date 
; 
this 
. 
Trips 
= 
trips 
; 
} 	
private 
Logger 
( 
) 
{ 
} 
public 
static 
Logger 
Load !
(! "
int" %
id& (
,( )
DniProperty* 5
dni6 9
,9 :
DateTime; C
dateD H
,H I
stringJ P
tripsQ V
)V W
{ 	
Logger 
logger 
= 
new 
Logger  &
{ 
Id 
= 
id 
, 
Dni 
= 
dni 
, 
Date 
= 
date 
, 
Trips 
= 
trips 
} 
; 
return   
logger   
;   
}!! 	
}"" 
}## ˆ
wC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\Repositories\ILoggerWriteOnlyRepository.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
Repositories )
{ 
public 

	interface &
ILoggerWriteOnlyRepository /
{ 
Task 
Add 
( 
Logger 
logger 
) 
;  
}		 
}

 ∞	
YC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\Trips\Bag.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
Trips "
{ 
public 

sealed 
class 
Bag 
{ 
public 
TotalEmentsProperty "
TotalElements# 0
{1 2
get3 6
;6 7
private8 ?
set@ C
;C D
}E F
public		 
List		 
<		 
Element		 
>		 
Elements		 %
{		& '
get		( +
;		+ ,
private		- 4
set		5 8
;		8 9
}		: ;
public 
Bag 
( 
List 
< 
Element 
>  
elements! )
)) *
{ 	
this 
. 
TotalElements 
=  
elements! )
.) *
Count* /
;/ 0
this 
. 
Elements 
= 
elements $
;$ %
} 	
} 
} ç
]C:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\Trips\Element.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
Trips "
{ 
public 

sealed 
class 
Element 
{ 
public 
WeightProperty 
Weight $
{% &
get' *
;* +
private, 3
set4 7
;7 8
}9 :
public		 
Element		 
(		 
WeightProperty		 %
weight		& ,
)		, -
{

 	
this 
. 
Weight 
= 
weight  
;  !
} 	
} 
} ¿
hC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\DniProperty.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
public 

sealed 
class 
DniProperty #
:$ %
StringProperty& 4
{ 
public 
DniProperty 
( 
string !
value" '
)' (
:) *
base+ /
(/ 0
)0 1
{ 	
if 
( 
string 
. 
IsNullOrWhiteSpace )
() *
value* /
)/ 0
)0 1
{ 
throw		 
new		 -
!PropertyShouldNotBeEmptyException		 ;
(		; <
$str		< ]
)		] ^
;		^ _
}

 
if 
( 
value 
. 
Length 
> 
$num !
)! "
{ 
throw 
new 
DomainException )
() *
$str* l
)l m
;m n
} 
else 
{ 
this 
. 
Value 
= 
value "
;" #
} 
} 	
public 
static 
implicit 
operator '
DniProperty( 3
(3 4
string4 :
text; ?
)? @
{ 	
return 
new 
DniProperty "
(" #
text# '
)' (
;( )
} 	
} 
} Â

iC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\FileProperty.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
public 

sealed 
class 
FileProperty $
:% &
StreamProperty' 5
{ 
public 
FileProperty 
( 
Stream "
value# (
)( )
:* +
base, 0
(0 1
)1 2
{ 	
if		 
(		 
value		 
is		 
null		 
)		 
{

 
throw 
new -
!PropertyShouldNotBeEmptyException ;
(; <
$str< ^
)^ _
;_ `
} 
else 
{ 
this 
. 
Value 
= 
value "
;" #
} 
} 	
public 
static 
implicit 
operator '
FileProperty( 4
(4 5
Stream5 ;
value< A
)A B
{ 	
return 
new 
FileProperty #
(# $
value$ )
)) *
;* +
} 	
} 
} ÿ
hC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\IntProperty.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
public 

class 
IntProperty 
{ 
public 
int 
Value 
{ 
get 
; 
set  #
;# $
}% &
public 
override 
string 
ToString '
(' (
)( )
{ 	
return		 
Value		 
.		 
ToString		 !
(		! "
)		" #
;		# $
}

 	
public 
static 
implicit 
operator '
int( +
(+ ,
IntProperty, 7
property8 @
)@ A
{ 	
return 
property 
. 
Value !
;! "
} 	
public 
override 
bool 
Equals #
(# $
object$ *
obj+ .
). /
{ 	
if 
( 
obj 
is 
null 
) 
{ 
return 
false 
; 
} 
if 
( 
ReferenceEquals 
(  
this  $
,$ %
obj& )
)) *
)* +
{ 
return 
true 
; 
} 
if 
( 
obj 
is 
int 
) 
{ 
return 
( 
int 
) 
obj 
==  "
Value# (
;( )
}   
return"" 
("" 
("" 
IntProperty""  
)""  !
obj""! $
)""$ %
.""% &
Value""& +
=="", .
Value""/ 4
;""4 5
}## 	
public%% 
override%% 
int%% 
GetHashCode%% '
(%%' (
)%%( )
{&& 	
return'' 
Value'' 
.'' 
GetHashCode'' $
(''$ %
)''% &
;''& '
}(( 	
}** 
}++ ˜
~C:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\PropertyShouldNotBeEmptyException.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
[ 
Serializable 
] 
public 

sealed 
class -
!PropertyShouldNotBeEmptyException 9
:: ;
DomainException< K
{ 
internal -
!PropertyShouldNotBeEmptyException 2
(2 3
string3 9
message: A
)A B
:C D
baseE I
(I J
messageJ Q
)Q R
{		 	
}

 	
public -
!PropertyShouldNotBeEmptyException 0
(0 1
)1 2
{ 	
} 	
public -
!PropertyShouldNotBeEmptyException 0
(0 1
string1 7
message8 ?
,? @
	ExceptionA J
innerExceptionK Y
)Y Z
:[ \
base] a
(a b
messageb i
,i j
innerExceptionk y
)y z
{ 	
} 	
private -
!PropertyShouldNotBeEmptyException 1
(1 2
System2 8
.8 9
Runtime9 @
.@ A
SerializationA N
.N O
SerializationInfoO `
serializationInfoa r
,r s
Systemt z
.z {
Runtime	{ Ç
.
Ç É
Serialization
É ê
.
ê ë
StreamingContext
ë °
streamingContext
¢ ≤
)
≤ ≥
:
¥ µ
base
∂ ∫
(
∫ ª
serializationInfo
ª Ã
,
Ã Õ
streamingContext
Œ ﬁ
)
ﬁ ﬂ
{ 	
} 	
} 
} ƒ
kC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\StreamProperty.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
public 

class 
StreamProperty 
{ 
public 
Stream 
Value 
{ 
get !
;! "
set# &
;& '
}( )
public

 
override

 
string

 
ToString

 '
(

' (
)

( )
{ 	
return 
Value 
. 
ToString !
(! "
)" #
;# $
} 	
public 
static 
implicit 
operator '
Stream( .
(. /
StreamProperty/ =
property> F
)F G
{ 	
return 
property 
. 
Value !
;! "
} 	
public 
override 
bool 
Equals #
(# $
object$ *
obj+ .
). /
{ 	
if 
( 
obj 
is 
null 
) 
{ 
return 
false 
; 
} 
if 
( 
ReferenceEquals 
(  
this  $
,$ %
obj& )
)) *
)* +
{ 
return 
true 
; 
} 
if   
(   
obj   
is   
string   
)   
{!! 
return"" 
obj"" 
."" 
ToString"" #
(""# $
)""$ %
==""& (
Value"") .
."". /
ToString""/ 7
(""7 8
)""8 9
;""9 :
}## 
return%% 
(%% 
(%% 
StreamProperty%% #
)%%# $
obj%%$ '
)%%' (
.%%( )
Value%%) .
==%%/ 1
Value%%2 7
;%%7 8
}&& 	
public(( 
override(( 
int(( 
GetHashCode(( '
(((' (
)((( )
{)) 	
return** 
Value** 
.** 
GetHashCode** $
(**$ %
)**% &
;**& '
}++ 	
},, 
}-- æ
kC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\StringProperty.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
public 

class 
StringProperty 
{ 
public 
string 
Value 
{ 
get !
;! "
set# &
;& '
}( )
public 
override 
string 
ToString '
(' (
)( )
{ 	
return		 
Value		 
;		 
}

 	
public 
static 
implicit 
operator '
string( .
(. /
StringProperty/ =
property> F
)F G
{ 	
return 
property 
. 
Value !
;! "
} 	
public 
override 
bool 
Equals #
(# $
object$ *
obj+ .
). /
{ 	
if 
( 
obj 
is 
null 
) 
{ 
return 
false 
; 
} 
if 
( 
ReferenceEquals 
(  
this  $
,$ %
obj& )
)) *
)* +
{ 
return 
true 
; 
} 
if 
( 
obj 
is 
string 
) 
{ 
return 
obj 
. 
ToString #
(# $
)$ %
==& (
Value) .
;. /
}   
return"" 
("" 
("" 
StringProperty"" #
)""# $
obj""$ '
)""' (
.""( )
Value"") .
==""/ 1
Value""2 7
;""7 8
}## 	
public%% 
override%% 
int%% 
GetHashCode%% '
(%%' (
)%%( )
{&& 	
return'' 
Value'' 
.'' 
GetHashCode'' $
(''$ %
)''% &
;''& '
}(( 	
})) 
}** ®
nC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\TotalDaysProperty.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
public 

sealed 
class 
TotalDaysProperty )
:* +
IntProperty, 7
{ 
public 
TotalDaysProperty  
(  !
int! $
value% *
)* +
:, -
base. 2
(2 3
)3 4
{ 	
if 
( 
$num 
<= 
value 
&& 
$num !
<=" $
value% *
)* +
{ 
throw		 
new		 
DomainException		 )
(		) *
$str		* |
)		| }
;		} ~
}

 
else 
{ 
this 
. 
Value 
= 
value "
;" #
} 
} 	
public 
static 
implicit 
operator '
TotalDaysProperty( 9
(9 :
int: =
value> C
)C D
{ 	
return 
new 
TotalDaysProperty (
(( )
value) .
). /
;/ 0
} 	
} 
} ∑
pC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\TotalEmentsProperty.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
public 

sealed 
class 
TotalEmentsProperty +
:, -
IntProperty. 9
{ 
public 
TotalEmentsProperty "
(" #
int# &
value' ,
), -
:. /
base0 4
(4 5
)5 6
{ 	
if 
( 
$num 
<= 
value 
&& 
$num !
<=" $
value% *
)* +
{ 
throw		 
new		 
DomainException		 )
(		) *
$str			* Å
)
		Å Ç
;
		Ç É
}

 
else 
{ 
this 
. 
Value 
= 
value "
;" #
} 
} 	
public 
static 
implicit 
operator '
TotalEmentsProperty( ;
(; <
int< ?
value@ E
)E F
{ 	
return 
new 
TotalEmentsProperty *
(* +
value+ 0
)0 1
;1 2
} 	
} 
} û
kC:\Users\mihernandez\Documents\GitHub\LazyLoading_BackEnd\LazyLoading.Domain\ValueObjects\WeightProperty.cs
	namespace 	
LazyLoading
 
. 
Domain 
. 
ValueObjects )
{ 
public 

sealed 
class 
WeightProperty &
:' (
IntProperty) 4
{ 
public 
WeightProperty 
( 
int !
value" '
)' (
:) *
base+ /
(/ 0
)0 1
{ 	
if 
( 
$num 
<= 
value 
&& 
$num !
<=" $
value% *
)* +
{ 
throw		 
new		 
DomainException		 )
(		) *
$str			* É
)
		É Ñ
;
		Ñ Ö
}

 
else 
{ 
this 
. 
Value 
= 
value "
;" #
} 
} 	
public 
static 
implicit 
operator '
WeightProperty( 6
(6 7
int7 :
value; @
)@ A
{ 	
return 
new 
WeightProperty %
(% &
value& +
)+ ,
;, -
} 	
} 
} 